{"src/components/mongodb.vue":"<template>\r\n  <div id=\"mongodb\">\r\n    <Card id=\"card\">\r\n      <p slot=\"title\">\r\n        <Icon type=\"md-alert\" />\r\n        Tip\r\n      </p>\r\n      <div id=\"content\">\r\n        <Alert show-icon type=\"warning\">Please sign in firstly！</Alert>\r\n        <Alert show-icon>The basic authentication is 'admin:pass'.</Alert>\r\n        <Button type=\"primary\" to=\"http://localhost:8081/mongo_express\" target=\"_blank\" >Go now</Button>\r\n      </div>\r\n    </Card>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'MongoDB',\r\n}\r\n</script>\r\n<style scoped>\r\n#mongodb{\r\n  width: 100%;\r\n  min-height: inherit;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n}\r\n#content{\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-content: space-around;\r\n  justify-content: space-around;\r\n  width: 400px; \r\n  height: 200px;\r\n}\r\n#content > div{\r\n  width: 400px; \r\n}\r\n</style>\r\n","src/components/search.vue":"<template>\r\n  <div id=\"search\">\r\n    <Input id=\"input\" suffix=\"ios-search\" size=\"large\" placeholder=\"search\" clearable @keyup.enter.native=\"searchAsync\" autocomplete=\"on\" />\r\n    <div id=\"result\">\r\n      <List item-layout=\"vertical\">\r\n        <ListItem v-for=\"(item, index) in presentItems\" :key=\"index\" style=\"width: 100%\">\r\n            <ListItemMeta :title=\"item.title\" :description=\"item.content\" />\r\n            <template slot=\"action\">\r\n                <li v-if=\"item.rate\">\r\n                  <Icon type=\"ios-star-outline\" /><span class=\"overflowHidden\">{{item.rate}}</span>\r\n                </li>\r\n                <li v-if=\"item.date\">\r\n                  <Icon type=\"ios-calendar-outline\" /><span class=\"overflowHidden\">{{item.date}}</span> \r\n                </li>\r\n                <li>\r\n                  <Icon type=\"ios-link-outline\" /><a :href=\"item.link\" target=\"_blank\" class=\"overflowHidden\">{{item.link}}</a>\r\n                </li>\r\n            </template>\r\n            <template slot=\"extra\">\r\n              <img :src=\"item.image\" style=\"width: 280px\">\r\n            </template>\r\n        </ListItem>\r\n      </List>\r\n      <Page class=\"pageFixed\"\r\n        :total=\"result.length\" show-sizer show-elevator \r\n        @on-change=\"page => {this.page=page}\"\r\n        @on-page-size-change=\"pageSize => {this.pageSize = pageSize}\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag';\r\nimport Client from '../graphql';\r\n\r\nexport default {\r\n  name: 'Search',\r\n  data(){\r\n    return {\r\n      presentItems: [],\r\n      page: 1,\r\n      pageSize: 10,\r\n      result: [],\r\n    }\r\n  },\r\n  computed: {\r\n    listImpactFactor () {\r\n      const { result, page, pageSize } = this\r\n      return { result, page, pageSize };\r\n    }\r\n  },\r\n  methods: {\r\n    searchAsync(e) {\r\n      const msg = this.$Message.loading({\r\n        content: 'Searching...',\r\n        duration: 0\r\n      });\r\n      const query = gql`\r\n        query search {\r\n          search(query: \"${e.target.value}\"){\r\n            res{\r\n              content\r\n              link\r\n              title\r\n              data\r\n              image\r\n              rate\r\n            }\r\n            status\r\n            message\r\n          }\r\n        }\r\n      `\r\n\r\n      return Client.query({query})\r\n        .then(res => {\r\n          if(res.data.search.status){\r\n            this.$Message.success({\r\n              background: true,\r\n              content: res.data.search.message\r\n            });\r\n            this.result = res.data.search.res\r\n            this.$Notice.success({\r\n              title: 'Searching result',\r\n              desc: `${this.result.length} results found`\r\n            });\r\n          }\r\n          else{\r\n            this.$Message.error({\r\n              background: true,\r\n              content: res.data.search.message\r\n            })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.$Message.error({\r\n            background: true,\r\n            content: err\r\n          });\r\n          this.result = [{\r\n            content: '我有一个应用程序连接到需要基本身份验证的站点.这些站点在运行时提供,在编译时不知道.我正在使用HttpClient 4.2.我不确定下面的代码是否应该如何指定基本身份验证,但文档会建议它.但是,我不知道在AuthScope的构造函数中传递什么.我原以为null参数意味着所提供的凭据应该用于所有link,但它会抛出',\r\n            link: 'https://codeday.me/bug/20190308/712366.html',\r\n            title: 'java – HttpClient 4.2,基本身份验证和AuthScope - 代码日志',\r\n            date: '2019-3-8',\r\n          }, {\r\n            content: '我正在构建一个使用Caspio API。我在使用他们的API进行身份验证时遇到了一些困难。我已经花了2-3天的时间试图解决这个问题，但这可能是由于我的一些理解。我读过无数关于堆叠溢出帖子的文章，但是没有解决这个问题。下面是我的解决方案的代码示例，它是基于我看过的内容，并且我得到',\r\n            link: 'https://cloud.tencent.com/developer/ask/169571',\r\n            title: '如何使用JavaScript的基本身份验证？ - 问答 - 云+社区 - 腾讯云',\r\n            date: '2018-8-14',\r\n            image: 'https://tse1-mm.cn.bing.net/th/id/OET.e144daeb23a44cf7b24f653ce32cd6ad?w=272&h=135&c=7&rs=1&o=5&pid=1.9',\r\n            rate: 3.5\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n            rate: 3.5,\r\n            image: 'https://tse1-mm.cn.bing.net/th/id/OET.366b43867c634c7c8689522b43a32e13?w=272&h=135&c=7&rs=1&o=5&pid=1.9',\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n            rate: 3.5,\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n            rate: 3.5,\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n            rate: 3.5,\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n            rate: 3.5,\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n          }, {\r\n            content: '内容来源于 Stack Overflow，并遵循CC BY-SA 3.0许可协议进行翻译 与使用 回答 (2)关注 (0)查看 (57) 我有以下代码来进行无需身份验证的http调用，一切正常',\r\n            link: 'https://cloud.tencent.com/developer/ask/140258',\r\n            title: '具有基本身份验证的Range5GET/POST http的问题 - 问答 - 云',\r\n            date: '2018-7-9',\r\n          }]\r\n        })\r\n        .finally(() => {\r\n          // remove loading.\r\n          msg();\r\n        })\r\n    },\r\n  },\r\n  watch: {\r\n    listImpactFactor: function(factors) {\r\n      const { result, page, pageSize } = factors;\r\n      this.presentItems = result.slice(pageSize * (page - 1), pageSize * page)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  #search{\r\n    position: relative;\r\n    min-height: inherit;\r\n    text-align: left;\r\n    background: #fff;\r\n  }\r\n  #input{\r\n    width: 400px;\r\n    margin: 20px;\r\n  }\r\n  #result{\r\n    border-top: solid 1px #dcdee2;\r\n    padding: 20px;\r\n    padding-bottom: 60px;\r\n  }\r\n  #result li{\r\n    display: inline-flex;\r\n    align-items: center;\r\n  }\r\n  .pageFixed{\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 20px;\r\n    margin-top: 20px;\r\n    transform: translateX(-50%);\r\n  }\r\n</style>\r\n","src/components/sign.vue":"<template>\r\n    <div id=\"sign\">\r\n        <Card id=\"card\">\r\n            <p slot=\"title\">\r\n                <Icon type=\"md-person-add\" />\r\n                Sign up/in\r\n            </p>\r\n            <div style=\"margin: 20px 0;\">\r\n                Username：\r\n                <Input v-model=\"username\" prefix=\"ios-contact\" size=\"large\" placeholder=\"username\" style=\"width: auto\" clearable  autocomplete=\"on\" />\r\n            </div>\r\n            <div style=\"margin: 30px 0;\">\r\n                Password：\r\n                <Input v-model=\"password\" prefix=\"ios-bookmark\" size=\"large\" placeholder=\"password\" style=\"width: auto\" type=\"password\" clearable  autocomplete=\"on\" />\r\n            </div>\r\n            <div>\r\n                <Button style=\"margin: 0 30px;\" @click.native=\"signupAsync\" >Sign up</Button>\r\n                <Button type=\"primary\" style=\"margin: 0 30px;\" @click.native=\"loginAsync\" >Sign in</Button>\r\n            </div>\r\n        </Card>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport gql from 'graphql-tag';\r\nimport Client from '../graphql';\r\n\r\nexport default {\r\n    name: 'Sign',\r\n    data(){\r\n        return {\r\n            username: '',\r\n            password: '',\r\n        }\r\n    },\r\n    methods: {\r\n        loginAsync() {\r\n            const msg = this.$Message.loading({\r\n                content: 'Sign in...',\r\n                duration: 0\r\n            });\r\n            const query = gql`\r\n                query login {\r\n                    login(input: {\r\n                        username: \"${this.username}\", \r\n                        password: \"${this.password}\"\r\n                    }){\r\n                        status\r\n                        message\r\n                        token\r\n                    }\r\n                }\r\n            `\r\n\r\n            return Client.query({query})\r\n                .then(res => {\r\n                    if(res.data.login.status){\r\n                        this.$Message.success({\r\n                            background: true,\r\n                            content: res.data.login.message\r\n                        });\r\n                        // set cookie 1 day\r\n                        const exp = new Date();\r\n                        exp.setTime(exp.getTime() + 24 * 60 * 60 * 1000);\r\n                        document.cookie = `token=${res.data.login.token};expires=${exp.toGMTString()};path=/`;\r\n                    }\r\n                    else{\r\n                        this.$Message.error({\r\n                            background: true,\r\n                            content: res.data.login.message\r\n                        })\r\n                    }\r\n                }).catch(err => {\r\n                    this.$Message.error({\r\n                        background: true,\r\n                        content: err\r\n                    })\r\n                }).finally(() => {\r\n                    // remove loading.\r\n                    msg();\r\n                })\r\n        },\r\n        signupAsync() {\r\n            const msg = this.$Message.loading({\r\n                content: 'Sign up...',\r\n                duration: 0\r\n            });\r\n            const mutation = gql`\r\n                mutation signup {\r\n                    signup(input: {\r\n                        username: \"${this.username}\", \r\n                        password: \"${this.password}\"\r\n                    }) {\r\n                        status\r\n                        message\r\n                    }\r\n                }\r\n            `\r\n            return Client.mutate({mutation})\r\n                .then(res => {\r\n                    if(res.data.signup.status){\r\n                        this.$Message.success({\r\n                            background: true,\r\n                            content: res.data.signup.message\r\n                        });\r\n                    }\r\n                    else{\r\n                        this.$Message.error({\r\n                            background: true,\r\n                            content: res.data.signup.message\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.$Message.error({\r\n                        background: true,\r\n                        content: err\r\n                    });\r\n                })\r\n                .finally(() => {\r\n                    // remove loading.\r\n                    msg();\r\n                })\r\n        },\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n#sign{\r\n    min-height: inherit;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n}\r\n#card{\r\n    width: 500px; \r\n    height: 300px;\r\n    font-size: 16px; \r\n}\r\n</style>\r\n","src/components/webrtc/getUserMedia/audio.vue":"<template>\r\n  <div class=\"audioContainer\">\r\n    <div class=\"selectContainer progressContainer\">\r\n      Instant: <Progress status=\"active\" :stroke-width=\"14\" :percent=\"instantMeter\" hide-info :stroke-color=\"['#4e54c8', '#8f94fb']\" />\r\n    </div>\r\n    <div class=\"selectContainer progressContainer\">\r\n      Slow: <Progress status=\"active\" :stroke-width=\"14\" :percent=\"slowMeter\" hide-info :stroke-color=\"['#108ee9', '#87d068']\" />\r\n    </div>\r\n    <div class=\"selectContainer progressContainer\">\r\n      Clip: <Progress status=\"active\" :stroke-width=\"14\" :percent=\"clipMeter\" hide-info :stroke-color=\"['#f83600', '#f9d423']\" />\r\n    </div>\r\n    <div class=\"selectContainer\">\r\n      <div>\r\n        InputDevices :\r\n        <Select prefix=\"ios-microphone\" style=\"width:200px\" clearable filterable @on-change=\"val => {if(val){this.inputAudio=JSON.parse(val);this.openAudio();}}\">\r\n          <Option v-for=\"item in inputDevices\" :value=\"JSON.stringify(item)\" :key=\"item.deviceId\">{{ item.label }}</Option>\r\n        </Select>\r\n      </div>\r\n      <div>\r\n        OutputDevices :\r\n        <Select prefix=\"ios-headset\" style=\"width:200px\" clearable filterable @on-change=\"val => {if(val){this.outputAudio=JSON.parse(val);changeOutputAudio();}}\">\r\n          <Option v-for=\"item in outputDevices\" :value=\"JSON.stringify(item)\" :key=\"item.deviceId\">{{ item.label }}</Option>\r\n        </Select>\r\n      </div>\r\n    </div>\r\n    <audio id=\"audio\" ref=\"audio\" controls></audio>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport SoundMeter from './soundMeter';\r\n\r\nexport default {\r\n  name: 'Audio',\r\n  data () {\r\n    return {\r\n      audioOn: false,\r\n      audioTrack: {},\r\n      inputAudio: {},\r\n      outputAudio: {},\r\n      inputDevices: [],\r\n      outputDevices: [],\r\n      clipMeter: 0,\r\n      instantMeter: 0,\r\n      slowMeter: 0,\r\n    }\r\n  },\r\n  mounted(){\r\n    navigator.mediaDevices.enumerateDevices().then(devices => {\r\n      this.inputDevices = devices.filter(dev => dev.kind === \"audioinput\")\r\n      this.outputDevices = devices.filter(dev => dev.kind === \"audiooutput\")\r\n      this.inputAudio = this.inputDevices[0]\r\n      this.outputAudio = this.outputDevices[0]\r\n      this.$Notice.warning({\r\n        title: 'Noise',\r\n        desc: 'Best to use headphones, there may be harsh noise.'\r\n      });\r\n      this.$refs.audio.volume = 0.2;\r\n      this.openAudio();\r\n    }).catch(err => {\r\n      this.$Message.error({\r\n        background: true,\r\n        content: `GetUserMedia error: ${err}`\r\n      });\r\n    });\r\n  },\r\n  methods: {\r\n    async openAudio() {\r\n      const audio = this.$refs.audio;\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n                video: false,\r\n                audio:  {\r\n                  deviceId: {\r\n                    exact: this.inputAudio.deviceId\r\n                  },\r\n                  echoCancellation: true,\r\n                  noiseSuppression: true,\r\n                }\r\n              });\r\n        this.audioTrack = stream.getAudioTracks()[0];\r\n            \r\n        this.$Message.success({\r\n          background: true,\r\n          content: `Using audio device: ${this.audioTrack.label}`\r\n        });\r\n\r\n        audio.srcObject = stream;\r\n        audio.play();\r\n        this.getSoundMeter(stream);\r\n\r\n        this.audioOn = true;\r\n      } catch (err) {\r\n        this.$Message.error({\r\n          background: true,\r\n          content: `GetUserMedia error: ${err}`\r\n        });\r\n      }\r\n    },\r\n    closeAudio(){\r\n      this.$refs.audio.src = '';\r\n      this.audioTrack.stop();\r\n      this.audioOn = false;\r\n    },\r\n    getSoundMeter(stream){\r\n      const audioContext = new window.AudioContext(),\r\n            soundMeter = new SoundMeter(audioContext),\r\n            _this = this;\r\n\r\n      soundMeter.connectToSource(stream, err => {\r\n        if (err) {\r\n          this.$Message.error({\r\n            background: true,\r\n            content: `GetSoundMeter error: ${err}`\r\n          });\r\n          return;\r\n        }\r\n        setInterval(() => {\r\n          _this.instantMeter = parseInt(soundMeter.instant.toFixed(2) * 100);\r\n          _this.slowMeter = parseInt(soundMeter.slow.toFixed(2) * 100);\r\n          _this.clipMeter = parseInt(soundMeter.clip.toFixed(2) * 100);\r\n        }, 200);\r\n      });\r\n    },\r\n    changeOutputAudio(){\r\n      if (typeof this.$refs.audio.sinkId !== 'undefined') {\r\n        this.$refs.audio.setSinkId(this.outputAudio.deviceId)\r\n            .then(() => {\r\n              this.$Message.success({\r\n                background: true,\r\n                content: `Change outputAudio to: ${this.outputAudio.label}`\r\n              });\r\n            })\r\n            .catch(error => {\r\n              if (error.name === 'SecurityError') {\r\n                this.$Message.error({\r\n                  background: true,\r\n                  content: `You need to use HTTPS for selecting audio output device: ${error}`\r\n                });\r\n              }\r\n              else{\r\n                this.$Message.error({\r\n                  background: true,\r\n                  content: `Change outputAudio error: ${error}`\r\n                });\r\n              }\r\n            });\r\n      } else {\r\n        this.$Message.error({\r\n          background: true,\r\n          content: 'Browser may not support output device selection.'\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.audioContainer{\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 15% 20px;\r\n}\r\n#audio{\r\n  width: 60%;\r\n  margin: 40px;\r\n}\r\n.selectContainer{\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  color: white;\r\n  padding: 0 20%;\r\n  margin: 20px 0;\r\n}\r\n.progressContainer{\r\n  justify-content: space-between;\r\n  padding: 0 30%;\r\n  margin: 40px 0;\r\n}\r\n.progressContainer > div{\r\n  width: 80%;\r\n}\r\n</style>\r\n","src/components/webrtc/getUserMedia/index.vue":"<template>\n  <Carousel v-model=\"page\" v-resize=\"getContainerSize\" ref=\"getUserMedia\" class=\"container\">\n    <CarouselItem>\n        <div :style=\"containerSize\">\n          <Video />\n        </div>\n    </CarouselItem>\n    <CarouselItem>\n        <div :style=\"containerSize\">\n          <Audio />\n        </div>\n    </CarouselItem>\n    <CarouselItem>\n        <div :style=\"containerSize\">\n          <Screen />\n        </div>\n    </CarouselItem>\n  </Carousel>\n</template>\n\n<script>\nimport Video from \"./video\"; \nimport Audio from \"./audio\";\nimport Screen from \"./screen\";\n\nexport default {\n  name: 'GetUserMedia',\n  components: {\n    Video, Audio, Screen\n  },\n  data () {\n    return {\n      page: 0,\n      containerSize: ''\n    }\n  },\n  mounted(){\n    this.$nextTick(function() {\n      this.getContainerSize();\n    })\n  },\n  methods: {\n    getContainerSize(){\n      const { width, height } = getComputedStyle(this.$refs.getUserMedia.$el); \n      this.containerSize = `width: ${width};height: ${height};`\n    }\n  },\n  directives: {\n    resize: {\n      bind(el, binding) {\n        let width = '', height = '';\n        function isReize() {\n          const style = document.defaultView.getComputedStyle(el);\n          if (width !== style.width || height !== style.height) {\n            binding.value();\n          }\n          width = style.width;\n          height = style.height;\n        }\n        el.__vueSetInterval__ = setInterval(isReize, 10);\n      },\n      unbind(el) {\n        clearInterval(el.__vueSetInterval__);\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container{\n  position: relative;\n  min-height: inherit;\n  background-color: #506b9e;\n}\n</style>\n","src/components/webrtc/getUserMedia/screen.vue":"<template>\r\n  <div class=\"videoContainer\">\r\n    <video id=\"video\" :src=\"recording\" controls></video>\r\n    <div class=\"selectContainer\">\r\n      <Button v-if=\"!capture\" type=\"primary\" @click.native=\"startCapturing\">Start screen capture</Button>\r\n      <Button v-else type=\"error\" @click.native=\"stopCapturing\">Stop screen capture</Button>\r\n      <Button type=\"success\" @click.native=\"downloadRecording\" :disabled=\"capture\">Download recording</Button>\r\n    </div>\r\n    <a ref=\"link\" style=\"display: none;\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Screen',\r\n  data () {\r\n    return {\r\n      capture: false,\r\n      recording: '',\r\n      chunks: [],\r\n      stream: null,\r\n      mediaRecorder: null,\r\n      format: 'video/webm',\r\n    }\r\n  },\r\n  methods: {\r\n    async startCapturing() {\r\n      try {\r\n        if (this.recording) {\r\n          window.URL.revokeObjectURL(this.recording);\r\n        }\r\n\r\n        this.stream = await navigator.mediaDevices.getDisplayMedia({ \r\n          video: true,\r\n          audio: true\r\n        });\r\n        this.stream.addEventListener('inactive', () => {\r\n          this.$Message.warning({\r\n            background: true,\r\n            content: \"Capture stream inactive. Stop recording!\"          \r\n          });\r\n          this.stopCapturing();\r\n        });\r\n\r\n        this.mediaRecorder = new MediaRecorder(this.stream, {mimeType: this.format});\r\n        this.mediaRecorder.addEventListener('dataavailable', event => {\r\n          if (event.data && event.data.size > 0) {\r\n            this.chunks.push(event.data);\r\n          }\r\n        });\r\n        this.mediaRecorder.start(10);\r\n\r\n        this.capture = true;\r\n      } catch (err) {\r\n        this.$Message.error({\r\n          background: true,\r\n          content: `Capturing error: ${err}`\r\n        });\r\n      }\r\n    },\r\n    stopCapturing(){\r\n      if (this.mediaRecorder)\r\n        this.mediaRecorder.stop();\r\n      this.mediaRecorder = null;\r\n      this.stream.getTracks().map(track => track.stop());\r\n      this.stream = null;\r\n\r\n      this.recording = window.URL.createObjectURL(new Blob(this.chunks, {type: this.format}));\r\n\r\n      this.capture = false;\r\n    },\r\n    downloadRecording(){\r\n      this.$refs.link.href = this.recording;\r\n      this.$refs.link.download = 'recording.webm';\r\n      this.$refs.link.click();\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.videoContainer{\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 20px;\r\n}\r\n#video{\r\n  width: 80%;\r\n  height: 80%;\r\n  margin: 10px 10%;\r\n}\r\n.selectContainer{\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  color: white;\r\n  padding: 0 20%;\r\n  margin: 20px 0;\r\n}\r\n</style>\r\n","src/components/webrtc/getUserMedia/video.vue":"<template>\r\n  <div class=\"videoContainer\">\r\n    <video id=\"video\" ref=\"video\" :style='filterStyle' controls src=\"\"></video>\r\n    <div class=\"selectContainer\">\r\n      <div>\r\n        Devices :\r\n        <Select prefix=\"ios-camera\" style=\"width:200px\" clearable filterable @on-change=\"val => {if(val){this.closeCamera();this.camera=JSON.parse(val)}}\">\r\n          <Option v-for=\"item in devices\" :value=\"JSON.stringify(item)\" :key=\"item.deviceId\">{{ item.label }}</Option>\r\n        </Select>\r\n      </div>\r\n      <div>\r\n        Filter :\r\n        <Select prefix=\"ios-color-filter\" style=\"width:200px\" clearable filterable @on-change=\"val => {if(val){this.filter=val}}\">\r\n          <Option v-for=\"item in Object.keys(filterList)\" :value=\"item\" :key=\"item\">{{ item }}</Option>\r\n        </Select>\r\n      </div>\r\n    </div>\r\n    <Slider v-model=\"percent\" show-input :tip-format=\"val => `Percent: ${val}%`\"></Slider>\r\n    <Tooltip max-width=\"200\" :content=\"this.camera.label\">\r\n      <Button v-if=\"!cameraOn\" type=\"primary\" @click.native=\"openCamera\">Open camera</Button>\r\n      <Button v-else type=\"error\" @click.native=\"closeCamera\">Close camera</Button>\r\n    </Tooltip>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Video',\r\n  data () {\r\n    return {\r\n      cameraOn: false,\r\n      camera: {},\r\n      devices: [],\r\n      videoTrack: {},\r\n      filter: 'Normal',\r\n      filterList: {\r\n        Normal: null,\r\n        Blur: {\r\n          max: 20,\r\n          unit: 'px',\r\n        },\r\n        Grayscale: {},\r\n        Invert: {},\r\n        Opacity: {},\r\n        HueRotate: {\r\n          name: 'hue-rotate',\r\n          unit: 'turn',\r\n        },\r\n        sepia: {},\r\n      },\r\n      percent: 100,\r\n    }\r\n  },\r\n  computed: {\r\n    filterStyle(){\r\n      const { filter, filterList, percent } = this;\r\n      if(filter === 'Normal')\r\n        return 'filter: none';\r\n      return `filter: ${filterList[filter].name || filter.toLowerCase()}(${percent * 0.01 * (filterList[filter].max || 1)}${filterList[filter].unit || ''})`;\r\n    }\r\n  },\r\n  mounted(){\r\n    navigator.mediaDevices.enumerateDevices().then(devices => {\r\n      this.devices = devices.filter(dev => dev.kind === \"videoinput\")\r\n      this.camera = this.devices[0];\r\n    }).catch(err => {\r\n      this.$Message.error({\r\n        background: true,\r\n        content: `GetUserMedia error: ${err}`\r\n      });\r\n    });\r\n  },\r\n  methods: {\r\n    async openCamera() {\r\n      const video = this.$refs.video;\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n                video: {\r\n                  deviceId: {\r\n                    exact: this.camera.deviceId\r\n                  }\r\n                },\r\n                audio: false\r\n              });\r\n        this.videoTrack = stream.getVideoTracks()[0];\r\n            \r\n        this.$Message.success({\r\n          background: true,\r\n          content: `Using video device: ${this.videoTrack.label}`\r\n        });\r\n\r\n        video.srcObject = stream;\r\n        video.play();\r\n\r\n        this.cameraOn = true;\r\n      } catch (err) {\r\n        this.$Message.error({\r\n          background: true,\r\n          content: `GetUserMedia error: ${err}`\r\n        });\r\n      }\r\n    },\r\n    closeCamera(){\r\n      // this.$refs.video.src = undefined;\r\n      this.videoTrack.stop();\r\n      this.cameraOn = false;\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.videoContainer{\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 20px;\r\n}\r\n#video{\r\n  width: 80%;\r\n  height: 50vh;\r\n  margin: 10px 10%;\r\n}\r\n.selectContainer{\r\n  display: flex;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  font-size: 14px;\r\n  color: white;\r\n  padding: 0 20%;\r\n}\r\n</style>\r\n","src/components/webrtc/RTCPeerConnection/index.vue":"<template>\n  <div ref=\"editor\" id=\"editor\"></div>\n</template>\n\n<script>\nexport default {\n  name: 'RTCPeerConnection',\n  data () {\n    return {\n      editor: null,\n      theme: 'vs-dark'\n    }\n  },\n  mounted(){\n    // this.editor = monaco.editor.create(this.$refs.editor, {\n    //   value: [\n\t\t// \t\t'function x() {',\n\t\t// \t\t'\\tconsole.log(\"Hello world!\");',\n\t\t// \t\t'}'\n\t\t// \t].join('\\n'),\n    //   language: 'html',\n    //   theme: this.theme, \n    //   automaticLayout: true\n    // })\n  },\n  methods: {\n  },\n}\n</script>\n\n<style scoped>\n#editor{\n  min-height: inherit;\n  text-align: left;\n}\n</style>\n"}